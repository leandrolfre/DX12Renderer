//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
//   uint gMaterialIndex;               // Offset:   64 Size:     4
//   uint pad1;                         // Offset:   68 Size:     4 [unused]
//   uint pad2;                         // Offset:   72 Size:     4 [unused]
//   uint pad3;                         // Offset:   76 Size:     4 [unused]
//
// }
//
// Resource bind info for gMaterialData
// {
//
//   struct MaterialData
//   {
//       
//       float4 DiffuseAlbedo;          // Offset:    0
//       float3 FresnelR0;              // Offset:   16
//       float Roughness;               // Offset:   28
//       uint DiffuseMapIndex;          // Offset:   32
//       uint MatPad0;                  // Offset:   36
//       uint MatPad1;                  // Offset:   40
//       int hasNormalMap;              // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gLinearSample                     sampler      NA          NA      S0             s0      1 
// gDiffuseMap                       texture  float4          2d      T0             t2      1 
// gNormalMap                        texture  float4          2d      T1             t3      1 
// gMaterialData                     texture  struct         r/o      T2      t0,space1      1 
// cbPerObject                       cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// POSITION                 1   xyzw        2     NONE   float       
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xy          4     NONE   float   xy  
// TANGENT                  0   xyz         5     NONE   float   xyz 
// Binormal                 0   xyz         6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[0:0][5], immediateIndexed, space=0
dcl_sampler S0[0:0], mode_default, space=0
dcl_resource_texture2d (float,float,float,float) T0[2:2], space=0
dcl_resource_texture2d (float,float,float,float) T1[3:3], space=0
dcl_resource_structured T2[0:0], 48, space=1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.PosV.x; v1.y <- pin.PosV.y; v1.z <- pin.PosV.z; 
//   v2.x <- pin.ShadowPosH.x; v2.y <- pin.ShadowPosH.y; v2.z <- pin.ShadowPosH.z; v2.w <- pin.ShadowPosH.w; 
//   v3.x <- pin.NormalV.x; v3.y <- pin.NormalV.y; v3.z <- pin.NormalV.z; 
//   v4.x <- pin.TexCoord.x; v4.y <- pin.TexCoord.y; 
//   v5.x <- pin.TangentV.x; v5.y <- pin.TangentV.y; v5.z <- pin.TangentV.z; 
//   v6.x <- pin.BitangentV.x; v6.y <- pin.BitangentV.y; v6.z <- pin.BitangentV.z; 
//   o3.x <- <PS return value>.FresnelShininess.x; o3.y <- <PS return value>.FresnelShininess.y; o3.z <- <PS return value>.FresnelShininess.z; o3.w <- <PS return value>.FresnelShininess.w; 
//   o2.x <- <PS return value>.Albedo.x; o2.y <- <PS return value>.Albedo.y; o2.z <- <PS return value>.Albedo.z; o2.w <- <PS return value>.Albedo.w; 
//   o1.x <- <PS return value>.Normal.x; o1.y <- <PS return value>.Normal.y; o1.z <- <PS return value>.Normal.z; o1.w <- <PS return value>.Normal.w; 
//   o0.x <- <PS return value>.Position.x; o0.y <- <PS return value>.Position.y; o0.z <- <PS return value>.Position.z; o0.w <- <PS return value>.Position.w
//
#line 52 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\color_SD.hlsl"
ld_structured r0.x, CB0[0][4].x, l(16), T2[0].xxxx  // r0.x <- matData.FresnelR0.x
ld_structured r0.y, CB0[0][4].x, l(20), T2[0].xxxx  // r0.y <- matData.FresnelR0.y
ld_structured r0.z, CB0[0][4].x, l(24), T2[0].xxxx  // r0.z <- matData.FresnelR0.z
ld_structured r1.x, CB0[0][4].x, l(28), T2[0].xxxx  // r1.x <- matData.Roughness
ld_structured r1.y, CB0[0][4].x, l(44), T2[0].xxxx  // r1.y <- matData.hasNormalMap

#line 54
dp3 r1.z, v3.xyzx, v3.xyzx
rsq r1.z, r1.z
mul r2.xyz, r1.zzzz, v3.xyzx  // r2.x <- pin.NormalV.x; r2.y <- pin.NormalV.y; r2.z <- pin.NormalV.z

#line 56
ine r1.y, l(0, 0, 0, 0), r1.y
if_nz r1.y

#line 58
  mov r1.yzw, r2.xxyz  // r1.y <- N.x; r1.z <- N.y; r1.w <- N.z

#line 59
  dp3 r3.x, v5.xyzx, r1.yzwy
  mul r3.xyz, r1.yzwy, r3.xxxx
  mov r3.xyz, -r3.xyzx
  add r3.xyz, r3.xyzx, v5.xyzx
  dp3 r3.w, r3.xyzx, r3.xyzx
  rsq r3.w, r3.w
  mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- T.x; r3.y <- T.y; r3.z <- T.z

#line 60
  dp3 r3.w, v6.xyzx, r1.yzwy
  mul r4.xyz, r1.yzwy, r3.wwww
  mov r4.xyz, -r4.xyzx
  add r4.xyz, r4.xyzx, v6.xyzx
  dp3 r3.w, r4.xyzx, r4.xyzx
  rsq r3.w, r3.w
  mul r4.xyz, r3.wwww, r4.xyzx  // r4.x <- B.x; r4.y <- B.y; r4.z <- B.z

#line 62
  mov r5.x, r3.x  // r5.x <- TBN._m00
  mov r5.y, r4.x  // r5.y <- TBN._m10
  mov r5.z, r1.y  // r5.z <- TBN._m20
  mov r6.x, r3.y  // r6.x <- TBN._m01
  mov r6.y, r4.y  // r6.y <- TBN._m11
  mov r6.z, r1.z  // r6.z <- TBN._m21
  mov r1.y, r3.z  // r1.y <- TBN._m02
  mov r1.z, r4.z  // r1.z <- TBN._m12
  mov r1.w, r1.w  // r1.w <- TBN._m22

#line 64
  sample r3.xyz, v4.xyxx, T1[3].xyzw, S0[0]
  mov r3.xyz, r3.xyzx  // r3.x <- normalMap.x; r3.y <- normalMap.y; r3.z <- normalMap.z

#line 65
  mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
  add r3.xyz, r3.xyzx, r4.xyzx

#line 66
  dp3 r2.x, r3.xyzx, r5.xyzx
  dp3 r2.y, r3.xyzx, r6.xyzx
  dp3 r2.z, r3.xyzx, r1.yzwy

#line 67
endif 

#line 69
sample r3.xyzw, v4.xyxx, T0[2].xyzw, S0[0]
log r3.xyzw, r3.xyzw
mul r3.xyzw, r3.xyzw, l(2.200000, 2.200000, 2.200000, 2.200000)
exp r3.xyzw, r3.xyzw  // r3.x <- diffuse.x; r3.y <- diffuse.y; r3.z <- diffuse.z; r3.w <- diffuse.w

#line 70
mov r1.x, -r1.x
add r0.w, r1.x, l(1.000000)  // r0.w <- shininess

#line 73
mov r1.xyz, v1.xyzx  // r1.x <- gbuffer.Position.x; r1.y <- gbuffer.Position.y; r1.z <- gbuffer.Position.z
mov r1.w, l(1.000000)  // r1.w <- gbuffer.Position.w

#line 74
mov r2.xyz, r2.xyzx  // r2.x <- gbuffer.Normal.x; r2.y <- gbuffer.Normal.y; r2.z <- gbuffer.Normal.z
mov r2.w, l(1.000000)  // r2.w <- gbuffer.Normal.w

#line 75
mov r3.xyzw, r3.xyzw  // r3.x <- gbuffer.Albedo.x; r3.y <- gbuffer.Albedo.y; r3.z <- gbuffer.Albedo.z; r3.w <- gbuffer.Albedo.w

#line 76
mov r0.xyz, r0.xyzx  // r0.x <- gbuffer.FresnelShininess.x; r0.y <- gbuffer.FresnelShininess.y; r0.z <- gbuffer.FresnelShininess.z
mov r0.w, r0.w  // r0.w <- gbuffer.FresnelShininess.w

#line 78
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r2.xyzw
mov o2.xyzw, r3.xyzw
mov o3.xyzw, r0.xyzw
ret 
// Approximately 61 instruction slots used
