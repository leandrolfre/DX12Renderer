//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gLinearSample                     sampler      NA          NA      S0             s0      1 
// GSSAOMap                          texture  float4          2d      T0             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   x           0   TARGET   float   x   
//
ps_5_1
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler S0[0:0], mode_default, space=0
dcl_resource_texture2d (float,float,float,float) T0[0:0], space=0
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.TexCoord.x; v1.y <- pin.TexCoord.y; 
//   o0.x <- <PS return value>
//
#line 35 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\ssaoBlur_SD.hlsl"
resinfo r0.xy, l(0), T0[0].xyzw
mov r0.x, r0.x  // r0.x <- texWidth
mov r0.y, r0.y  // r0.y <- texHeight

#line 36
div r1.x, l(1.000000), r0.x  // r1.x <- texelSize.x
div r1.y, l(1.000000), r0.y  // r1.y <- texelSize.y

#line 37
mov r0.x, l(0)  // r0.x <- result

#line 38
mov r0.y, l(-2)  // r0.y <- x
mov r0.z, r0.x  // r0.z <- result
mov r0.w, r0.y  // r0.w <- x
loop 
  ilt r1.z, r0.w, l(2)
  breakc_z r1.z

#line 40
  mov r1.z, l(-2)  // r1.z <- y
  mov r1.w, r0.z  // r1.w <- result
  mov r2.x, r1.z  // r2.x <- y
  loop 
    ilt r2.y, r2.x, l(2)
    breakc_z r2.y

#line 42
    itof r3.x, r0.w
    itof r3.y, r2.x
    mul r2.yz, r1.xxyx, r3.xxyx  // r2.y <- offset.x; r2.z <- offset.y

#line 43
    add r2.yz, r2.yyzy, v1.xxyx
    sample r2.y, r2.yzyy, T0[0].yxzw, S0[0]
    add r1.w, r1.w, r2.y

#line 44
    iadd r2.x, r2.x, l(1)
  endloop 
  mov r0.z, r1.w  // r0.z <- result

#line 45
  iadd r0.w, r0.w, l(1)
endloop 

#line 46
div o0.x, r0.z, l(16.000000)
ret 
// Approximately 31 instruction slots used
