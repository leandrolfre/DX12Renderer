//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPerPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12 [unused]
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16 [unused]
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  448
//       float FalloffStart;            // Offset:  460
//       float3 Direction;              // Offset:  464
//       float FalloffEnd;              // Offset:  476
//       float3 Position;               // Offset:  480
//       float SpotPower;               // Offset:  492
//       float4x4 ShadowViewProj;       // Offset:  496
//       float4x4 ShadowTransform;      // Offset:  560
//
//   } gLights[16];                     // Offset:  448 Size:  2816
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gLinearSample                     sampler      NA          NA      S0             s0      1 
// gShadowSample                   sampler_c      NA          NA      S1             s1      1 
// gCubeMap                          texture  float4        cube      T0             t0      1 
// gShadowMap                        texture  float4          2d      T1             t1      1 
// gSSAOMap                          texture  float4          2d      T2             t2      1 
// GBufferPosition                   texture  float4          2d      T3      t0,space2      1 
// GBufferNormal                     texture  float4          2d      T4      t1,space2      1 
// GBufferAlbedo                     texture  float4          2d      T5      t2,space2      1 
// GBufferFresnelShininess           texture  float4          2d      T6      t3,space2      1 
// cbPerPass                         cbuffer      NA          NA     CB0            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1:1][39], immediateIndexed, space=0
dcl_sampler S0[0:0], mode_default, space=0
dcl_sampler S1[1:1], mode_comparison, space=0
dcl_resource_texturecube (float,float,float,float) T0[0:0], space=0
dcl_resource_texture2d (float,float,float,float) T1[1:1], space=0
dcl_resource_texture2d (float,float,float,float) T2[2:2], space=0
dcl_resource_texture2d (float,float,float,float) T3[0:0], space=2
dcl_resource_texture2d (float,float,float,float) T4[1:1], space=2
dcl_resource_texture2d (float,float,float,float) T5[2:2], space=2
dcl_resource_texture2d (float,float,float,float) T6[3:3], space=2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 10
dcl_indexableTemp x0[9], 4
dcl_indexableTemp x1[3], 4
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.TexCoord.x; v1.y <- pin.TexCoord.y; 
//   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
//
#line 70 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\quad_SD.hlsl"
sample r0.xyz, v1.xyxx, T3[0].xyzw, S0[0]
mov r0.xyz, r0.xyzx  // r0.x <- position.x; r0.y <- position.y; r0.z <- position.z

#line 71
sample r1.xyz, v1.xyxx, T4[1].xyzw, S0[0]
mov r1.xyz, r1.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z

#line 72
sample r2.xyz, v1.xyxx, T5[2].xyzw, S0[0]
mov r2.xyz, r2.xyzx  // r2.x <- albedo.x; r2.y <- albedo.y; r2.z <- albedo.z

#line 73
sample r3.xyzw, v1.xyxx, T6[3].xyzw, S0[0]  // r3.x <- fresnelShininess.x; r3.y <- fresnelShininess.y; r3.z <- fresnelShininess.z; r3.w <- fresnelShininess.w

#line 74
mul r4.xyzw, r0.xxxx, CB0[1][4].xyzw
mul r5.xyzw, r0.yyyy, CB0[1][5].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r0.zzzz, CB0[1][6].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, CB0[1][7].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyz, r4.xxxx, CB0[1][35].xyzx
mul r6.xyz, r4.yyyy, CB0[1][36].xyzx
add r5.xyz, r5.xyzx, r6.xyzx
mul r4.xyz, r4.zzzz, CB0[1][37].xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r5.xyz, r4.wwww, CB0[1][38].xyzx
add r4.xyz, r4.zxyz, r5.zxyz  // r4.x <- shadowPosH.z; r4.y <- shadowPosH.x; r4.z <- shadowPosH.y

#line 75
nop 
mov r4.xyz, r4.xyzx

#line 128 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\inc\LightingUtils.hlsli"
mov r4.x, r4.x  // r4.x <- depth

#line 130
resinfo_uint r5.xy, l(0), T1[1].xyzw
mov r5.x, r5.x  // r5.x <- width
mov r5.y, r5.y  // r5.y <- height

#line 132
utof r0.w, r5.x
div r6.x, l(1.000000), r0.w  // r6.x <- dx

#line 133
utof r0.w, r5.y
div r5.y, l(1.000000), r0.w  // r5.y <- dy

#line 134
mov r0.w, l(9)  // r0.w <- offsetSampleNum

#line 135
mov r7.x, -r6.x
mov r7.y, -r5.y
mov r8.y, -r5.y
mov r6.y, -r5.y
mov r9.x, -r6.x
mov r5.x, -r6.x
mov x0[0].xy, r7.xyxx
mov r8.x, l(0)
mov x0[1].xy, r8.xyxx
mov x0[2].xy, r6.xyxx
mov r9.y, l(0)
mov x0[3].xy, r9.xyxx
mov x0[4].xy, l(0,0,0,0)
mov r6.z, l(0)
mov x0[5].xy, r6.xzxx
mov x0[6].xy, r5.xyxx
mov r5.z, l(0)
mov x0[7].xy, r5.zyzz
mov r6.w, r5.y
mov x0[8].xy, r6.xwxx

#line 141
mov r1.w, l(0)  // r1.w <- pcf

#line 145
mov r5.xy, x0[0].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[1].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[2].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[3].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[4].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[5].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[6].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[7].xyxx
add r5.xy, r4.yzyy, r5.xyxx
sample_c_lz r2.w, r5.xyxx, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w
mov r5.xy, x0[8].xyxx
add r4.yz, r4.yyzy, r5.xxyx
sample_c_lz r2.w, r4.yzyy, T1[1].xxxx, S1[1], r4.x
add r1.w, r1.w, r2.w

#line 147
itof r0.w, r0.w
div r0.w, r1.w, r0.w  // r0.w <- <CalcShadowFactor return value>

#line 75 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\quad_SD.hlsl"
mov r0.w, r0.w  // r0.w <- shadowFactor

#line 76
mov r0.xyz, -r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww  // r0.x <- viewDir.x; r0.y <- viewDir.y; r0.z <- viewDir.z

#line 77
sample r1.w, v1.xyxx, T2[2].yzwx, S0[0]
mov r1.w, r1.w  // r1.w <- ao

#line 78
mul r4.xyz, r2.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000)  // r4.x <- ambient.x; r4.y <- ambient.y; r4.z <- ambient.z

#line 80
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), CB0[1][28].w
if_nz r2.w

#line 82
  mul r4.xyz, r1.wwww, r4.xyzx

#line 83
endif 

#line 85
nop 
mov x1[0].xyz, CB0[1][28].xyzx
mov x1[2].xyz, CB0[1][29].xyzx
mov r2.xyz, r2.xyzx
mov r3.xyz, r3.xyzx
mov r3.w, r3.w
mov r1.xyz, r1.xyzx
mov r0.xyz, r0.xyzx
mov r0.w, r0.w

#line 98 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\inc\LightingUtils.hlsli"
mov r5.xyz, l(0,0,0,0)  // r5.x <- result.x; r5.y <- result.y; r5.z <- result.z

#line 103
nop 
mov r6.xyz, x1[0].xyzx
mov r7.xyz, x1[2].xyzx
mov r2.xyz, r2.xyzx
mov r3.xyz, r3.xyzx
mov r3.w, r3.w
mov r1.xyz, r1.xyzx
mov r0.xyz, r0.xyzx

#line 49
dp3 r1.w, r7.xyzx, r7.xyzx
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r7.xyzx  // r7.x <- lightDir.x; r7.y <- lightDir.y; r7.z <- lightDir.z

#line 50
dp3 r1.w, r7.xyzx, r1.xyzx
max r1.w, r1.w, l(0.000000)
mul r6.xyz, r1.wwww, r6.xyzx  // r6.x <- lightStrength.x; r6.y <- lightStrength.y; r6.z <- lightStrength.z

#line 52
nop 
mov r6.xyz, r6.xyzx
mov r7.xyz, r7.xyzx
mov r1.xyz, r1.xyzx
mov r0.xyz, r0.xyzx
mov r2.xyz, r2.xyzx
mov r3.xyz, r3.xyzx
mov r3.w, r3.w

#line 36
mul r1.w, r3.w, l(1024.000000)  // r1.w <- m

#line 37
mov r8.xyz, -r0.xyzx
dp3 r2.w, r8.xyzx, r1.xyzx
add r2.w, r2.w, r2.w
mov r2.w, -r2.w
mul r9.xyz, r1.xyzx, r2.wwww
add r8.xyz, r8.xyzx, r9.xyzx  // r8.x <- r.x; r8.y <- r.y; r8.z <- r.z

#line 38
sample r8.xyz, r8.xyzx, T0[0].xyzw, S0[0]
log r8.xyz, r8.xyzx
mul r8.xyz, r8.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
exp r8.xyz, r8.xyzx  // r8.x <- reflectColor.x; r8.y <- reflectColor.y; r8.z <- reflectColor.z

#line 39
nop 

#line 40
add r0.xyz, r7.xyzx, r0.xyzx
dp3 r2.w, r0.xyzx, r0.xyzx
rsq r2.w, r2.w
mul r0.xyz, r0.xyzx, r2.wwww  // r0.x <- halfVec.x; r0.y <- halfVec.y; r0.z <- halfVec.z

#line 41
mov r2.w, l(0.800000)  // r2.w <- specStrength

#line 42
dp3 r0.x, r1.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, r1.w
exp r0.x, r0.x
mul r0.x, r2.w, r0.x
mul r0.xyz, r6.xyzx, r0.xxxx  // r0.x <- specular.x; r0.y <- specular.y; r0.z <- specular.z

#line 44
mul r1.xyz, r2.xyzx, r6.xyzx
mov r2.xyz, -r1.xyzx
add r2.xyz, r2.xyzx, r8.xyzx
mul r2.xyz, r2.xyzx, r3.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- <BlinnPhong return value>.x; r0.y <- <BlinnPhong return value>.y; r0.z <- <BlinnPhong return value>.z

#line 52
mov r0.xyz, r0.xyzx  // r0.x <- <ComputeDirectionalLight return value>.x; r0.y <- <ComputeDirectionalLight return value>.y; r0.z <- <ComputeDirectionalLight return value>.z

#line 103
mul r0.xyz, r0.xyzx, r0.wwww
add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 121
mov r0.xyz, r0.xyzx  // r0.x <- <ComputeLighting return value>.x; r0.y <- <ComputeLighting return value>.y; r0.z <- <ComputeLighting return value>.z

#line 85 "C:\gamedev\DX12Renderer\dx12\DX12HelloWorld\Shaders\quad_SD.hlsl"
mov r0.xyz, r0.xyzx  // r0.x <- directLight.x; r0.y <- directLight.y; r0.z <- directLight.z

#line 87
add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z

#line 89
mov r0.w, l(1.000000)  // r0.w <- litColor.w

#line 91
mov r1.x, l(2.200000)  // r1.x <- gamma

#line 92
div r2.x, l(1.000000), r1.x
div r2.y, l(1.000000), r1.x
div r2.z, l(1.000000), r1.x
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
exp r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z

#line 94
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 182 instruction slots used
